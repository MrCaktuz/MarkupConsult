@use './variables' as *;
@use 'SASS:map';

// === Variables ===
@mixin set-variables($key, $array) {
  :root {
    @each $name, $value in $array {
      @if $name == 'default' {
        --#{$key}: #{$value};
      } @else {
        --#{$key}-#{$name}: #{$value};
      }
    }
  }
}

// === Media query ===
@mixin mq($breakpoint) {
  @if $breakpoint != 'xs' and map.get($breakpoints, $breakpoint) {
    @media (min-width: map.get($breakpoints, $breakpoint)) {
      @content;
    }
  }
}

// === Mask ===
@mixin base-mask() {
  mask-size: contain;
  mask-position: center;
  mask-repeat: no-repeat;
}

// === CTA ===
@mixin btn() {
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: var(--sp-2);
  color: var(--c-text);
  border: var(--br-transparent);
  border-radius: var(--rd-btn);
  transition: var(--tr);
  background-color: var(--c-btn-bg);
}

$highlight-params: (
  radius: calc(var(--rd-btn) / 0.73),
  border: var(--br-btn-hover),
  inset: 0,
);
$inset-change: 0.3rem;

@mixin highlight-cta($settings: ()) {
  $config: map.merge($highlight-params, $settings);
  $config: map.merge($highlight-params, $settings);
  $inset: map.get($config, inset) - $inset-change;

  position: relative;

  &::after {
    content: '';
    position: absolute;
    inset: map.get($config, inset);
    border-radius: map.get($config, radius);
    border: map.get($config, border);
    opacity: 0;
    transition: var(--tr);
  }

  @include mq(md) {
    &:hover {
      cursor: pointer;
      outline: none;

      &::after {
        opacity: 1;
        inset: $inset;
      }
    }
  }

  &:active,
  &:focus-visible {
    outline: none;

    &::after {
      opacity: 1;
      inset: $inset;
    }
  }
}
