@use "./variables" as *;
@use "SASS:list";
@use "SASS:map";
@use "SASS:meta";

// === Variables ===
@mixin set-variables($key, $array) {
  :root {
    @each $name, $value in $array {
      @if $name == "default" {
        --#{$key}: #{$value};
      } @else {
        --#{$key}-#{$name}: #{$value};
      }
    }
  }
}

// === Color theme ===
@mixin set-color-data($theme-name, $key) {
  color-scheme: #{$theme-name};
  @each $color-name, $color-values in $color-themes {
    --#{$key}-#{$color-name}: #{map.get($color-values, $theme-name)};
  }
}

@mixin set-colors-variables($key) {
  $first-color-name: list.nth(map.keys($color-themes), 1);
  $first-color-value: map.get($color-themes, $first-color-name);

  @if meta.type-of($first-color-value) == "map" {
    $theme-list: map.keys($first-color-value);
    $first-theme: list.nth($theme-list, 1);

    @each $theme-name in $theme-list {
      @if $theme-name == $first-theme {
        :root,
        [data-theme="#{$theme-name}"]:root {
          @include set-color-data($theme-name, $key);
        }
      } @else {
        [data-theme="#{$theme-name}"]:root {
          @include set-color-data($theme-name, $key);
        }
        @media (prefers-color-scheme: #{$theme-name}) {
          :root {
            @include set-color-data($theme-name, $key);
          }
        }
      }
    }
  } @else {
    :root {
      color-scheme: "default";
      @each $color-name, $color-values in $color-themes {
        --#{$key}-#{$color-name}: #{$color-values};
      }
    }
  }
}

// === Title size ===
@mixin set-title-sizes() {
  @each $level, $config in $title-sizes {
    #{$level},
    .#{$level} {
      font-size: clamp(
        #{map.get($config, "min")},
        #{map.get($config, "ratio")},
        #{map.get($config, "max")}
      );
    }
  }
}

// === Media query ===
@mixin mq($breakpoint) {
  @if $breakpoint != "xs" {
    @media (min-width: map.get($breakpoints, $breakpoint)) {
      @content;
    }
  }
}

// === Mask ===
@mixin base-mask() {
  mask-size: contain;
  mask-position: center;
  mask-repeat: no-repeat;
}

// === CTA ===
@mixin hoverBtn($radius: var(--sp-1), $br: var(--br-btn-hover)) {
  position: relative;

  &::after {
    content: "";
    position: absolute;
    inset: 0;
    border-radius: $radius;
    border: $br;
    opacity: 0;
    transition: var(--tr);
  }

  &:hover {
    cursor: pointer;
  }

  &:hover,
  &:active,
  &:focus-visible {
    outline: none;

    &::after {
      opacity: 1;
      inset: -0.3rem;
    }
  }
}
